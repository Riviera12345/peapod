Documentation: peapod.conf

peapod requires a configuration file that lists the network interfaces on which it should listen, and how it should handle receiving and sending EAPOL data on those interfaces.

The syntax of the configuration file is simple and should be relatively self-explanatory.
Just remember that an opening curly brace ( { ) must always contain at least one suboption and be accompanied by a closing curly brace ( } ), a semicolon ( ; ) is necessary at the end of statements, only double quotes ( " ) are allowed, and comment lines start with a number sign ( # ). See §4 for examples.

1. iface
iface
	iface <interface> { <iface suboptions> };
	iface <interface>;

At least two network interfaces are required for peapod to run. <interface> is Linux's name for a network interface on the system, e.g. eth0.

1.1. iface suboptions
ingress
	ingress { <ingress suboptions> };

Determines how peapod should treat this interface while receiving data.

See §2.1 for more on <ingress suboptions>.

egress
	egress { <egress suboptions> };

Determines how peapod should treat this interface when sending data it has received.

See §2.2 for more on <egress suboptions>.

set-mac
	set-mac xx:xx:xx:xx:xx:xx;

peapod will set the MAC address of this interface to the specified address during startup. However, if peapod tries to set the MAC address of an interface and is unsuccessful for whatever reason, it will not try again until it is completely restarted.

This cannot be combined with the ingress suboption called set-mac, as explained in §2.1.

promiscuous
	promiscuous;

peapod will put this interface into promiscuous mode instead of the normal multicast mode during startup. This option should not be necessary for most users.

Normally, network interfaces simply drop any frames that they receive that have a destination MAC address different from their own. peapod sets interfaces to multicast mode and configures them to listen on the EAPOL multicast address (____) during startup, so that the network interfaces on which peapod is running also accept frames destined for that address. This address is used as the destination MAC address in communications by both parties during an EAPOL session's early stages.

Putting an interface into promiscuous mode has a similar effect, except that instead of accepting traffic destined for one additional MAC address, the interface will accept traffic destined for any address.

2. Suboptions
2.1. ingress
set-mac
	set-mac <interface>;

Given the following:

	iface eth0 {
		ingress {
			set-mac eth1;
			[<more options>]
		};
		[<more options>]
	};

	iface eth1 [{ <more options> }];

peapod will set eth0's MAC address to the source MAC address of the first EAPOL frame that arrives on eth1, if that address is different from eth0's current address.

However, if peapod tries to set the MAC address of an interface and is unsuccessful for whatever reason, it will not try again until it is completely restarted.

See §4.2 for a more detailed explanation.

This cannot be combined with the <iface suboption> called set-mac, as explained in §1.1.

exec
	exec <type> <script>;
EAPOL frames of the given <EAPOL frame type> or EAP-Packet frames containing a packet of the given <EAP packet code> that have been received on the current interface will trigger the execution of a <script>. This occurs before the frame is filtered.

See peapod(1) for more on script execution.

See §3 for more on <type>s.

filter
	filter <type>[, <type>...];
EAPOL frames of the given <EAPOL frame type>, or EAP-Packet frames containing a packet of the given <EAP packet code>, that have been received on the current interface will be dropped and not proxied to other interfaces. This occurs after the frame triggers the execution of a script.

See §3 for more on <type>s.


2.2. egress
filter
	filter <type>[, <eap type>...];
EAPOL frames of the given <EAPOL frame type> or EAP-Packet frames containing a packet of the given <EAP packet code> that are ready to be sent on the current interface will be dropped and not sent on the current interface. This occurs before the frame triggers the execution of a script.
See §3 for more on <type>s.

exec
	exec <type> <script>;
EAPOL frames of the given <EAPOL frame type>, or EAP-Packet frames containing a packet of the given <EAP packet code>, that are sent on the current interface will trigger the execution of a <script>. This occurs after the frame is filtered.

See peapod(1) for more on script execution.

See §3 for more on <type>s.

vlan
	vlan { <vlan suboptions> };
	no vlan;
In the first form, the <vlan suboptions> override the values of the priority, DEI, and VLAN ID fields in the VLAN tag of EAPOL frames that are sent on the current interface. If the frame being sent did not originally have a VLAN tag when it was received on another interface, one will be added. If a VLAN tag is added, and not all <vlan suboptions> were provided, the fields in the VLAN tag whose values are controlled by the missing <vlan suboptions> will be set to 0.

The EAPOL specification states that EAPOL sessions should not occur on a VLAN, but may be priority tagged - i.e. only the priority field in the VLAN header is used, with other fields set to 0. However, this form allows users to manipulate all fields in the header if they so desire.

In the second form, EAPOL frames that are sent on the current interface will be sent without a VLAN tag. If the frame being sent originally had a VLAN tag when it was received on another interface, it will be removed.
See §2.3 for more on <vlan suboptions>.

2.3. vlan
For reference, here is a bit-by-bit breakdown of the 4-byte IEEE 802.1Q VLAN tag.

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|             TPID              | PCP | |          VID          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                       ^
         (always 0x8100)              DEI


priority
	priority <number>;
Set the Priority Code Point field to <number>, 0 to 7, in all frames that are sent on the current interface.

drop-eligible
	drop-eligible;
Set the Drop Eligible Indicator bit in all frames that are sent on the current interface.

id
	id <number>;
Set the VLAN IDentifier field to <number>, 0 to 4094, in all frames that are sent on the current interface.

3. types
For reference, here are the 5 EAPOL frame Types defined in the IEEE 802.1X specification.

Type	Description			Comment
0	EAP-Packet			Frame encapsulates an EAP packet

1	EAPOL-Start			Sent by supplicant to begin an EAPOL session

2	EAPOL-Logoff			Sent by supplicant to force the end of an EAPOL session and
					immediately set a port to the unauthorized state

3	EAPOL-Key			May be used to transmit cryptographic keys between supplicant
					and authenticator once a session has been established

4	EAPOL-Encapsulated-ASF-Alert	Allows transmission of an Alerting Standards Forum alert, such
					as an SNMP trap, on an otherwise unauthorized port

For reference, here are the 4 EAP packet Codes defined in IETF RFC 2284.

Code	Description			Comment
1	Request				EAP packet contains a request for information

2	Response			EAP packet contains a response to a previous request

3	Success				Informs supplicant that authentication was successful

4	Failure				Informs supplicant that authentication was unsuccessful

These are represented in peapod.conf as the following <type> keywords:

	packet start logoff key encapsulated-asf-alert request response success failure

In addition, the following keyword has the same effect as "packet, start, logoff, key":

	all

4. Examples

4.1. Minimum required configuration

	iface eth0;
	iface eth1;

With this configuration file, peapod will silently proxy all EAPOL frames between the two interfaces eth0 and eth1.

4.2 Typical

	# Interface connected to a network with EAPOL authentication
	iface eth0 {
		ingress {
			set-mac eth1;
		};
	};
	# Interface connected to a device we want to impersonate
	iface eth1;

With this configuration file, peapod will behave much as in the example in §4.1, but as soon as an EAPOL frame comes in from a device connected to eth1, eth0's current MAC address will be compared to the MAC address of that device. Supposing that the addresses don't already match, eth0 will be brought down, its MAC address set to the MAC address of that device, and brought back up.

This will disconnect the network on eth0 and invalidate any pending EAPOL session. By default, peapod will wait ten seconds and restart. The EAPOL authenticator on the eth0 side will typically initiate another session with a different session ID, and this time, the session authentication will be proxied uninterrupted.

Once the authentication is successful, the upstream port on the eth0 side will be unblocked, and eth0 will be granted access to the network, as it now appears to be the device that was connected to eth1.


	# Interface connected to a network with EAPOL authentication
	iface eth0 {
		# MAC address of the device we want to impersonate
		set-mac xx:xx:xx:xx:xx:xx;
	};
	# Interface connected to a to a device we want to impersonate
	iface eth1;

With this configuration file, peapod will behave much as in the example in §4.1, but it will set eth0's MAC address as specified by the set-mac iface suboption during startup.

Once the authentication is successful, the upstream port on the eth0 side will be unblocked, and eth0 will be granted access to the network, as it now appears to be the device that was connected to eth1.

4.3 filter, exec

	# Interface connected to a network with EAPOL authentication
	iface eth0 {
		# MAC address of the device we want to impersonate
		set-mac xx:xx:xx:xx:xx:xx;
		ingress {
			# Proxy only EAP-Packets from upstream
			filter start, logoff, key, encapsulated-asf-alert;
			# Run a script restarting the DHCP client on eth0 once authenticated
			exec success "/etc/network/restart_dhcp.sh";
		};
	};
	# Interface connected to a device we want to impersonate
	iface eth1 {
		ingress {
			# Proxy only EAP-Packets from downstream
			filter start, logoff, key, encapsulated-asf-alert;
		};
	};

With this configuration file, peapod will behave much as in the second example in §4.2, but it will proxy only EAP-Packet frames between eth0 and eth1, and not frames of other types such as EAPOL-Start, EAPOL-Logoff, etc. In this example, the device on eth1 periodically sends EAPOL-Logoff frames followed by EAPOL-Start frames, which would otherwise result in the momentary loss of connectivity on eth0 while another EAPOL session is established.

The upstream network signals a successful authentication by sending an EAP-Packet frame to eth0 containing a packet with the Success code, to eth0. This will trigger the execution of a user-defined script before being proxied to eth1.

See peapod(1) for more on script execution.

4.4 filter, exec, vlan, more than two interfaces

	# Interface connected to a network with EAPOL authentication
	iface eth0 {
		# MAC address of the device we want to impersonate
		set-mac xx:xx:xx:xx:xx:xx;
		ingress {
			# Run a script restarting the DHCP client on eth0 once authenticated
			exec success /etc/network/restart_dhcp.sh;
		};
		egress {
			# Proxy only EAP-Packets from downstream
			filter start, logoff, key, encapsulated-asf-alert;
		};
	};
	# Interface connected to a device we want to impersonate
	iface eth1 {
		egress {
			# Proxy only EAP-Packets from upstream - not EAPOL-Start, etc.
			filter start, logoff, key, encapsulated-asf-alert;
		};
	};
	# Monitor/port mirror interface
	iface eth2 {
		# Don't proxy anything entering on this interface
		ingress {
			filter all;
		};
		egress {
			# But save everything that entered on other interfaces
			exec all "/etc/peapod save frame.sh";
			# And forward it wrapped in a VLAN tag
			vlan {
				pcp 4;
				vlan 99;
			};
		};
	};

With this configuration file, peapod will behave much as in the example in §4.3 with respect to eth0 and eth1. Note that the ingress filters previously on eth0 are now the egress filters on eth1, and the ingress filters on eth1 are now the egress filters on eth0. With the ingress filter on eth2, the overall effect for those two interfaces is the same.

EAPOL traffic entering on eth0 and eth1 is proxied to eth2, and is saved on its way out by means of a script. This works because the script is run with environment variables containing the entire original EAPOL frame, base64 encoded.

Unfortunately, eth2 does need to be a real and connected network interface for peapod to use it. In this example we may imagine that eth2.99 is on something like a management VLAN, and the forwarded packets will be logged again further back in the network. However, if eth2 were not available, it would be possible to have an "exec all" ingress option on eth0 and eth1 to execute the same script and save the traffic, even before any ingress filters are applied.

See peapod(1) for more on script execution.